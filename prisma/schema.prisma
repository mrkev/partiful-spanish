generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

model supabase_user {
  id    String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email String? @unique

  // ... other fields from auth.users you want to access
  @@map("users") // Maps the model to the 'users' table in the 'auth' schema
  @@schema("auth") // Specifies the schema
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["auth", "public"] // Include both schemas
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  name  String?
  image String?
  bio   String?

  events Event[] @relation("CreatorEvents") // todo?
  rsvps  RSVP[]

  @@schema("public")
}

model Event {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  start DateTime
  end   DateTime?

  title       String
  description String?
  location    String?

  image     String?
  creatorId String
  creator   User    @relation("CreatorEvents", fields: [creatorId], references: [id]) // todo

  rsvps RSVP[]

  @@schema("public")
}

model RSVP {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId  String
  eventId String
  status  RSVPStatus

  user  User  @relation(fields: [userId], references: [id])
  event Event @relation(fields: [eventId], references: [id])

  @@unique([userId, eventId])
  @@schema("public")
}

enum RSVPStatus {
  YES
  NO
  MAYBE

  @@schema("public")
}
